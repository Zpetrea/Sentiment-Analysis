ggplot(Platforms, aes(Netflix)) +
geom_boxplot()
ggplot(Platforms, aes(Hulu)) +
geom_boxplot()
ggplot(Platforms, aes(Netflix)) +
geom_boxplot()
par(mfrow = c(2,2))
ggplot(Platforms, aes(Netflix)) +
geom_bar()
ggplot(Platforms, aes(Hulu)) +
geom_bar()
par(mfrow = c(4,4))
ggplot(Platforms, aes(Netflix)) +
geom_bar()
ggplot(Platforms, aes(Hulu)) +
geom_bar()
platforms <- pivot_longer(Platforms, cols = starts_with("Netflix"), names_to = "Apps", values_to = "Streaming")
View(Platforms)
View(platforms)
platforms <- pivot_longer(Platforms, cols = Netflix:`Disney+`, names_to = "Apps", values_to = "Streaming")
View(platforms)
platforms_Long <- pivot_longer(Platforms, cols = Netflix:`Disney+`, names_to = "Apps", values_to = "Streaming")
ggplot(platforms_Long, aes(Apps, Streaming, fill = Apps)) +
geom_bar()
ggplot(platforms_Long, aes('Apps', 'Streaming', fill = Apps)) +
geom_bar()
ggplot(platforms_Long, aes(platforms_Long$Apps, platforms_Long$Streaming, fill = Apps)) +
geom_bar()
ggplot(platforms_Long, aes(platforms_Long$Apps, platforms_Long$Streaming, fill = platforms_Long$Apps)) +
geom_bar()
ggplot(platforms_Long, aes(platforms_Long$Apps, platforms_Long$Streaming, fill = platforms_Long$Apps)) +
geom_col()
ggplot(platforms_Long, aes(platforms_Long$Apps, platforms_Long$Streaming, fill = platforms_Long$Apps)) +
geom_col() +
labs(title = "Movies Available per Streaming Platform", x = "Apps", y = "Number of Titles")
ggplot(platforms_Long, aes(platforms_Long$Apps, platforms_Long$Streaming, fill = platforms_Long$Apps)) +
geom_col(show.legend = FALSE) +
labs(title = "Movies Available per Streaming Platform", x = "Apps", y = "Number of Titles")
ggplot(platforms_Long, aes(`Apps`, `Streaming`, fill = `Apps`)) +
geom_col(show.legend = FALSE) +
labs(title = "Movies Available per Streaming Platform", x = "Apps", y = "Number of Titles")
#Titles per age group
unique(Movies$Age)
Movies$Age <- factor(c("7+", "13+", "16+", "18+"), levels = c("7+", "13+", "16+", "18+"))
Movies$Age <- factor(Movies$Age)
View(Movies)
Movies1 <- Movies %>%
summarize(Age = (Age, na.rm TRUE))
Movies1 <- Movies %>%
summarize(Age = (Age, na.rm = TRUE))
Movies1 <- drop_na(Movies$Age)
View(Movies)
ggplot(Movies, aes(`Age`, n(`Title`), color = `Age`)) +
geom_point()
ggplot(Movies, aes(`Age`, n(Title), color = `Age`)) +
geom_point()
ggplot(Movies, aes(`Age`, n(), color = `Age`)) +
geom_point()
ggplot(Movies, aes(`Age`, `Title`, color = `Age`)) +
geom_point()
ggplot(Movies, aes(`Age`, `Title`, color = `Age`)) +
geom_area()
ggplot(Movies, aes(`Age`, `Title`, color = `Age`)) +
geom_density_2d_filled()
ggplot(Movies, aes(`Age`, `Title`, color = `Age`)) +
geom_density()
ggplot(Movies, aes(`Age`, `Title`, color = `Age`)) +
geom_bar()
ggplot(Movies, aes(`Age`, `Title`, color = `Age`)) +
geom_col()
ggplot(Movies, aes(`Age`, `Title`, color = `Age`)) +
geom_col() +
coord_flip()
View(platforms_Long)
Age_Groups <- Movies[, c(4, 6, 7, 8, 9)]
Age_Long <- pivot_longer(Age_Groups, cols = `Age`:`Disney+`, names_to = "Apps", values_to = "Streaming")
Age_Long <- pivot_longer(Age_Groups, cols = !Age, names_to = "Age Group", values_to = "Platform")
ggplot(Age_Long, aes(`Age`, `Platform`, fill = `Platform)) +
geom_point() +
geom_smooth()
ggplot(Age_Long, aes(`Age`, `Platform`, fill = `Platform`)) +
geom_point() +
geom_smooth()
ggplot(Age_Long, aes(`Age`, `Platform`, fill = `Platform`)) +
geom_area()
View(Age_Long)
View(Age_Groups)
Age_Long <- pivot_longer(Age_Groups, cols = !Age, names_to = "Platform", values_to = "Streaming")
ggplot(Age_Long, aes(`Age`, `Platform`, fill = `Streaming`)) +
geom_area()
ggplot(Age_Long, aes(`Platform`, `Streaming`, fill = `Age`)) +
geom_area()
ggplot(Age_Long, aes(`Platform`, `Streaming`, fill = `Age`)) +
geom_col()
ggplot(Age_Long, aes(`Platform`, `Streaming`, fill = !is.na(`Age`))) +
geom_col()
ggplot(Age_Long, aes(`Platform`, `Streaming`, fill = rm.na(`Age`))) +
geom_col()
ggplot(Age_Long, !is.na(Age), aes(`Platform`, `Streaming`, fill = `Age`)) +
geom_col()
ggplot(Age_Long, !is.na(`Age`), aes(`Platform`, `Streaming`, fill = `Age`)) +
geom_col()
ggplot(Age_Long, !is.na(`Age`), aes(`Platform`, `Streaming`, fill = `Age`)) +
geom_col()
geom_col()
ggplot(Age_Long, !is.na(`Age`)) aes(`Platform`, `Streaming`, fill = `Age`) +
ggplot(Age_Long, aes(`Platform`, `Streaming`, fill = `Age`)) +
geom_col()
ggplot(Age_Long, aes(`Platform`, `Streaming`, fill = `Age[1:5]`)) +
geom_col()
ggplot(Age_Long, aes(`Platform`, `Streaming`, fill = `Age`[1:5])) +
geom_col()
ggplot(Age_Long, aes(`Platform`, `Streaming`, fill = drop_na(`Age`)) +
ggplot(Age_Long, aes(`Platform`, `Streaming`, fill = drop_na(`Age`))) +
geom_col()
ggplot(Age_Long, aes(`Platform`, `Streaming`, fill = !is.na(`Age`))) +
geom_col()
ggplot(Age_Long, aes(`Platform`, `Streaming`, fill = rm.na(`Age`))) +
geom_col()
ggplot(Age_Long, aes(`Platform`, `Streaming`, fill = remove_na.factor(`Age`))) +
geom_col()
ggplot(Age_Long, aes(`Platform`, `Streaming`, fill = remove_na(`Age`))) +
geom_col()
knitr::opts_chunk$set(echo = FALSE)
require(tidyverse)
require(tidytext)
Movies <- read_csv("MoviesOnStreamingPlatforms.csv")
Movies <- Movies[, -1]
decades <- paste(1:9 * 10, "s", sep = "")
Movies$decades <- paste0(10*round((as.numeric(Movies$Year)-1900)/10),"s")
Movies$`Rotten Tomatoes` <- gsub("\\/.*", "", Movies$`Rotten Tomatoes`)
Movies$`Rotten Tomatoes` <- as.numeric(Movies$`Rotten Tomatoes`)
keys = list(list(1910,1919, "10's"),
list(1920,1929, "20's"),
list(1930,1939, "30's"),
list(1940,1949, "40's"),
list(1950,1959, "50's"),
list(1960,1969, "60's"),
list(1970,1979, "70's"),
list(1980,1989, "80's"),
list(1990,1999, "90's"),
list(2000,2009, "2000's"),
list(2010,2019, "2010's"),
list(2020,2029, "2020's"))
Movies$Label = NA
for(k in keys){
Movies$Label[Movies$Year >= k[[1]] & Movies$Year <= k[[2]]]=k[[3]]
}
Movies <- Movies[, -11]
level_order <- c("10's", "20's", "30's", "40's", "50's", "60's", "70's", "80's", "90's", "2000's", "2010's", "2020's")
Movies %>%
group_by(Label) %>%
summarize(Best = max(`Rotten Tomatoes`, na.rm = TRUE)) %>%
ggplot(aes(factor(Label, level = level_order), Best, color = Best)) +
geom_point() +
xlab("Decade") +
ylab("Rating") +
ggtitle("The Highest Rating Movie per Decade")
#What movies are available in all streaming Platforms?
Stream <- Movies %>%
filter(Netflix == 1 & Hulu == 1 & `Prime Video` == 1 & `Disney+` == 1)
#See which platform has provided the most movies
Platforms <- Movies[, 6:9]
platforms_Long <- pivot_longer(Platforms, cols = Netflix:`Disney+`, names_to = "Apps", values_to = "Streaming")
ggplot(platforms_Long, aes(`Apps`, `Streaming`, fill = `Apps`)) +
geom_col(show.legend = FALSE) +
labs(title = "Movies Available per Streaming Platform", x = "Apps", y = "Number of Titles")
#Platforms Most Popular per age group
unique(Movies$Age)
#Movies$Age <- factor(Movies$Age)
#Age_Groups <- Movies[, c(4, 6, 7, 8, 9)]
#Age_Long <- pivot_longer(Age_Groups, cols = !Age, names_to = "Platform", values_to = "Streaming")
#ggplot(Age_Long, aes(`Platform`, `Streaming`, fill = remove_na(`Age`))) +
#geom_col()
Movies$Age <- drop_na(Movies$Age)
Movies$Age <- remove_na(Movies$Age)
Movies$Age <- Movies %>%
drop_na(Age)
Movies$Age <- factor(Movies$Age)
Age_Groups <- Movies[, c(4, 6, 7, 8, 9)]
Age_Long <- pivot_longer(Age_Groups, cols = !Age, names_to = "Platform", values_to = "Streaming")
ggplot(Age_Long, aes(`Platform`, `Streaming`, fill = `Age`)) +
geom_col()
Movies$Age <- Movies[!is.na(Movies$Age)]
Movies[!is.na(Movies$Age)]
Movies[!is.na(Movies$Age), ]
Movies$Age <- factor(Movies$Age)
Age_Groups <- Movies[, c(4, 6, 7, 8, 9)]
Age_Long <- pivot_longer(Age_Groups, cols = !Age, names_to = "Platform", values_to = "Streaming")
ggplot(Age_Long, aes(`Platform`, `Streaming`, fill = `Age`)) +
geom_col()
View(Movies)
knitr::opts_chunk$set(echo = FALSE)
require(tidyverse)
require(tidytext)
Movies <- read_csv("MoviesOnStreamingPlatforms.csv")
Movies <- Movies[, -1]
decades <- paste(1:9 * 10, "s", sep = "")
Movies$decades <- paste0(10*round((as.numeric(Movies$Year)-1900)/10),"s")
Movies$`Rotten Tomatoes` <- gsub("\\/.*", "", Movies$`Rotten Tomatoes`)
Movies$`Rotten Tomatoes` <- as.numeric(Movies$`Rotten Tomatoes`)
keys = list(list(1910,1919, "10's"),
list(1920,1929, "20's"),
list(1930,1939, "30's"),
list(1940,1949, "40's"),
list(1950,1959, "50's"),
list(1960,1969, "60's"),
list(1970,1979, "70's"),
list(1980,1989, "80's"),
list(1990,1999, "90's"),
list(2000,2009, "2000's"),
list(2010,2019, "2010's"),
list(2020,2029, "2020's"))
Movies$Label = NA
for(k in keys){
Movies$Label[Movies$Year >= k[[1]] & Movies$Year <= k[[2]]]=k[[3]]
}
Movies <- Movies[, -11]
level_order <- c("10's", "20's", "30's", "40's", "50's", "60's", "70's", "80's", "90's", "2000's", "2010's", "2020's")
Movies %>%
group_by(Label) %>%
summarize(Best = max(`Rotten Tomatoes`, na.rm = TRUE)) %>%
ggplot(aes(factor(Label, level = level_order), Best, color = Best)) +
geom_point() +
xlab("Decade") +
ylab("Rating") +
ggtitle("The Highest Rating Movie per Decade")
#What movies are available in all streaming Platforms?
Stream <- Movies %>%
filter(Netflix == 1 & Hulu == 1 & `Prime Video` == 1 & `Disney+` == 1)
#See which platform has provided the most movies
Platforms <- Movies[, 6:9]
platforms_Long <- pivot_longer(Platforms, cols = Netflix:`Disney+`, names_to = "Apps", values_to = "Streaming")
ggplot(platforms_Long, aes(`Apps`, `Streaming`, fill = `Apps`)) +
geom_col(show.legend = FALSE) +
labs(title = "Movies Available per Streaming Platform", x = "Apps", y = "Number of Titles")
#Platforms Most Popular per age group
unique(Movies$Age)
Movies[!is.na(Movies$Age), ]
#Movies$Age <- factor(Movies$Age)
#Age_Groups <- Movies[, c(4, 6, 7, 8, 9)]
#Age_Long <- pivot_longer(Age_Groups, cols = !Age, names_to = "Platform", values_to = "Streaming")
#ggplot(Age_Long, aes(`Platform`, `Streaming`, fill = `Age`)) +
#geom_col()
Movies$Age <- factor(Movies$Age)
Age_Groups <- Movies[, c(4, 6, 7, 8, 9)]
Age_Long <- pivot_longer(Age_Groups, cols = !Age, names_to = "Platform", values_to = "Streaming")
ggplot(Age_Long, aes(`Platform`, `Streaming`, fill = `Age`)) +
geom_col()
knitr::opts_chunk$set(echo = FALSE)
require(tidyverse)
require(tidytext)
Movies <- read_csv("MoviesOnStreamingPlatforms.csv")
Movies <- Movies[, -1]
decades <- paste(1:9 * 10, "s", sep = "")
Movies$decades <- paste0(10*round((as.numeric(Movies$Year)-1900)/10),"s")
Movies$`Rotten Tomatoes` <- gsub("\\/.*", "", Movies$`Rotten Tomatoes`)
Movies$`Rotten Tomatoes` <- as.numeric(Movies$`Rotten Tomatoes`)
keys = list(list(1910,1919, "10's"),
list(1920,1929, "20's"),
list(1930,1939, "30's"),
list(1940,1949, "40's"),
list(1950,1959, "50's"),
list(1960,1969, "60's"),
list(1970,1979, "70's"),
list(1980,1989, "80's"),
list(1990,1999, "90's"),
list(2000,2009, "2000's"),
list(2010,2019, "2010's"),
list(2020,2029, "2020's"))
Movies$Label = NA
for(k in keys){
Movies$Label[Movies$Year >= k[[1]] & Movies$Year <= k[[2]]]=k[[3]]
}
Movies <- Movies[, -11]
level_order <- c("10's", "20's", "30's", "40's", "50's", "60's", "70's", "80's", "90's", "2000's", "2010's", "2020's")
Movies %>%
group_by(Label) %>%
summarize(Best = max(`Rotten Tomatoes`, na.rm = TRUE)) %>%
ggplot(aes(factor(Label, level = level_order), Best, color = Best)) +
geom_point() +
xlab("Decade") +
ylab("Rating") +
ggtitle("The Highest Rating Movie per Decade")
#What movies are available in all streaming Platforms?
Stream <- Movies %>%
filter(Netflix == 1 & Hulu == 1 & `Prime Video` == 1 & `Disney+` == 1)
#See which platform has provided the most movies
Platforms <- Movies[, 6:9]
platforms_Long <- pivot_longer(Platforms, cols = Netflix:`Disney+`, names_to = "Apps", values_to = "Streaming")
ggplot(platforms_Long, aes(`Apps`, `Streaming`, fill = `Apps`)) +
geom_col(show.legend = FALSE) +
labs(title = "Movies Available per Streaming Platform", x = "Apps", y = "Number of Titles")
#Platforms Most Popular per age group
unique(Movies$Age)
Movies[complete.cases(Movies$Age), ]
Movies$Age <- factor(Movies$Age)
Age_Groups <- Movies[, c(4, 6, 7, 8, 9)]
Age_Long <- pivot_longer(Age_Groups, cols = !Age, names_to = "Platform", values_to = "Streaming")
ggplot(Age_Long, aes(`Platform`, `Streaming`, fill = `Age`)) +
geom_col()
ggplot(Age_Long, aes(`Platform`, `Streaming`, fill = `Age`)) +
geom_col()
View(Movies)
library(gutenbergr)
install.packages("gutenbergr")
require(gutenbergr)
#Topic Modeling
Movies1 <- Movies %>% rename("Text" = "Title")
View(Movies1)
tidy_Movies <- Movies1 %>%
#create a new column to track which line every word is coming from
mutate(line = row_number()) %>%
#unnest the text column into the word column
unnest_tokens(word, text) %>%
#filter out the stop words
anti_join(stop_words)
#Topic Modeling
Movies1 <- Movies %>% rename("text" = "Title")
tidy_Movies <- Movies1 %>%
#create a new column to track which line every word is coming from
mutate(line = row_number()) %>%
#unnest the text column into the word column
unnest_tokens(word, text) %>%
#filter out the stop words
anti_join(stop_words)
#count the words and identify  the most common words
tidy_Movies%>%
count(word,sort = TRUE)
View(tidy_Movies)
Movies_tf_idf <- tidy_Movies %>%
count(Year, word, sort = TRUE) %>%
bind_tf_idf(word, Year, n) %>%
arrange(-tf_idf) %>%
group_by(Year) %>%
top_n(8) %>%
ungroup
Movies_tf_idf
Movies_tf_idf %>%
mutate(word = reorder_within(word, tf_idf,Year)) %>%
ggplot(aes(word, tf_idf, fill = Year)) +
geom_col(alpha = 0.5, show.legend = FALSE) +
facet_wrap(~ Year, scales = "free", ncol = 4) +
coord_flip() +
theme(strip.text=element_text(size=7)) +
labs(x = NULL, y = "tf-idf",
title = "Highest tf-idf words in Movies & Tv Shows per Year")+
scale_x_reordered()
Movies_tf_idf
Movies_tf_idf %>%
mutate(word = reorder_within(word, tf_idf,Year)) %>%
ggplot(aes(word, tf_idf, fill = Year)) +
geom_col(alpha = 0.5, show.legend = FALSE) +
facet_wrap(~ Year, scales = "free", ncol = 4) +
coord_flip() +
theme(strip.text=element_text(size=7)) +
labs(x = NULL, y = "tf-idf",
title = "Highest tf-idf words in Movies & Tv Shows per Year")+
scale_x_reordered()
Movies_tf_idf %>%
mutate(word = reorder_within(word, tf_idf,Year)) %>%
ggplot(aes(word, tf_idf, fill = Year)) +
geom_col(alpha = 0.5, show.legend = FALSE) +
coord_flip() +
theme(strip.text=element_text(size=7)) +
labs(x = NULL, y = "tf-idf",
title = "Highest tf-idf words in Movies & Tv Shows per Year")+
scale_x_reordered()
Movies_tf_idf <- tidy_Movies %>%
count(Year, word, sort = TRUE) %>%
bind_tf_idf(word, Year, n) %>%
arrange(-tf_idf) %>%
group_by(Year) %>%
top_n(1) %>%
ungroup
Movies_tf_idf
head(Movies_tf_idf,10) %>%
mutate(word = reorder_within(word, tf_idf,Year)) %>%
ggplot(aes(word, tf_idf, fill = Year)) +
geom_col(alpha = 0.5, show.legend = FALSE) +
coord_flip() +
theme(strip.text=element_text(size=7)) +
labs(x = NULL, y = "tf-idf",
title = "Highest tf-idf words in Movies & Tv Shows per Year")+
scale_x_reordered()
head(Movies_tf_idf,10) %>%
mutate(word = reorder_within(word, tf_idf,Year)) %>%
ggplot(aes(word, tf_idf, fill = Year)) +
geom_col(alpha = 0.5, show.legend = TRUE) +
coord_flip() +
theme(strip.text=element_text(size=7)) +
labs(x = NULL, y = "tf-idf",
title = "Highest tf-idf words in Movies & Tv Shows per Year")+
scale_x_reordered()
library(topicmodels)
Movies_dtm<-tidy_Movies %>%
count(year, word) %>%
cast_dtm(Year, word, n)
Movies_dtm<-tidy_Movies %>%
count(Year, word) %>%
cast_dtm(Year, word, n)
#Traint he Topic Model
topic_model<-LDA(Movies_dtm, k=6, control = list(seed = 1234))
#Traint he Topic Model
topic_model<-LDA(Movies_dtm, k=6, control = list(seed = 1234))
topic_model
posterior(topic_model)$topics
terms(topic_model, k=15)
#Beta is the probability assignments of words to topics. In other words, Beta is the probablity that a word contributes to a topic.
topics <- tidy(topic_model, matrix = "beta")
topics
topics%>%
#let's group_by each topic
group_by(topic)%>%
#take the top 10 words in each topic
top_n(10)%>%
ungroup%>%
mutate(term = reorder_within(term, beta, topic)) %>%
ggplot(aes(term, beta, fill = topic)) +
geom_col(show.legend = FALSE) +
facet_wrap(~ topic, scales = "free") +
coord_flip() +
labs(x = NULL, y = expression(beta),
title = "Highest word probabilities for each topic",
subtitle = "Different words are associated with different topics")+
scale_x_reordered()
beta_spread <- topics %>%
mutate(topic = paste0("topic", topic)) %>%
spread(topic, beta) %>%
filter(topic1 > .001 | topic2 > .001) %>%
mutate(log_ratio = log2(topic2 / topic1))
beta_spread
beta_spread %>%
group_by(direction = log_ratio > 0) %>%
top_n(10, abs(log_ratio)) %>%
ungroup() %>%
mutate(term = reorder(term, log_ratio)) %>%
ggplot(aes(term, log_ratio)) +
geom_col() +
labs(y = "Log2 ratio of beta in topic 2 / topic 1") +
coord_flip ()
td_gamma <- tidy(topic_model, matrix = "gamma", document_names = rownames(Movies_dfm))
td_gamma
View(Movies_dtm)
td_gamma <- tidy(topic_model, matrix = "gamma", document_names = Movies_dtm$dimnames)
td_gamma
ggplot(td_gamma, aes(gamma, fill = as.factor(topic))) +
#a histogram of gamma
#we don't need to see the legend
geom_histogram() +
#show the graphsin three columns
facet_wrap(~ document, ncol = 3) +
labs(title = "Distribution of document probabilities  for each topic",
subtitle = "Each topic is associated with 1-3   stories",
y = "Number of stories", x = expression(gamma))
td_gamma <- tidy(topic_model, matrix = "gamma", document_names = Movies_dtm$i)
td_gamma
td_gamma <- tidy(topic_model, matrix = "gamma", document_names = Movies_dtm$j)
td_gamma
td_gamma <- tidy(topic_model, matrix = "gamma", document_names = Movies_dtm$v)
td_gamma
td_gamma <- tidy(topic_model, matrix = "gamma", document_names = Movies_dtm$ncol)
td_gamma
#
Movies_dtm1<-tidy_Movies %>%
count(word) %>%
cast_dtm(word, n)
View(tidy_Movies)
#
Movies_dtm1<-tidy_Movies %>%
count(word) %>%
cast_dtm(word, n)
View(tidy_Movies)
View(tidy_Movies)
#
Movies_dtm1<-tidy_Movies %>%
count(word, ID) %>%
cast_dtm(ID,word, n)
td_gamma <- tidy(topic_model, matrix = "gamma", document_names = rownames(Movies_dtm1))
td_gamma
ggplot(td_gamma, aes(gamma, fill = as.factor(topic))) +
#a histogram of gamma
#we don't need to see the legend
geom_histogram() +
#show the graphsin three columns
facet_wrap(~ document, ncol = 3) +
labs(title = "Distribution of document probabilities  for each topic",
subtitle = "Each topic is associated with 1-3   stories",
y = "Number of stories", x = expression(gamma))
tidy(topic_model, matrix = "gamma") %>%
ggplot(aes(x=document, y=gamma)) +
geom_point(aes(color=factor(topic))) +
labs(x=NULL, y="Topic probability") +
coord_flip()
library(ldatuning)
result <- FindTopicsNumber(
Movies_dtm,
topics = seq(from = 2, to = 40, by = 1),
metrics = c("Griffiths2004", "CaoJuan2009", "Arun2010", "Deveaud2014"),
method = "Gibbs",
control = list(seed = 77),
mc.cores = 2L,
verbose = TRUE)
result <- FindTopicsNumber(
Movies_dtm,
topics = seq(from = 2, to = 40, by = 1),
metrics = c("Griffiths2004", "CaoJuan2009", "Arun2010", "Deveaud2014"),
method = "Gibbs",
control = list(seed = 77),
mc.cores = 2L,
verbose = TRUE)
FindTopicsNumber_plot(result)
